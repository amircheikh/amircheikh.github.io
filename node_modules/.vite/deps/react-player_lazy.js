import {
  require_patterns,
  require_utils
} from "./chunk-QJLSKBCU.js";
import {
  init_memoize_one_esm,
  memoize_one_esm_exports,
  require_react_fast_compare
} from "./chunk-47GMQ4AI.js";
import {
  require_cjs
} from "./chunk-JCZLTBRS.js";
import "./chunk-ZONWMCPW.js";
import {
  require_prop_types
} from "./chunk-MH6OOWFU.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/react-player/lazy/players/index.js
var require_players = __commonJS({
  "node_modules/react-player/lazy/players/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = require_react();
    var _utils = require_utils();
    var _patterns = require_patterns();
    var _default = [{
      key: "youtube",
      name: "YouTube",
      canPlay: _patterns.canPlay.youtube,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerYouTube' */
          "./YouTube-BJTHS227.js"
        );
      })
    }, {
      key: "soundcloud",
      name: "SoundCloud",
      canPlay: _patterns.canPlay.soundcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerSoundCloud' */
          "./SoundCloud-MHS3WQ5T.js"
        );
      })
    }, {
      key: "vimeo",
      name: "Vimeo",
      canPlay: _patterns.canPlay.vimeo,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerVimeo' */
          "./Vimeo-3T6ZUE2F.js"
        );
      })
    }, {
      key: "facebook",
      name: "Facebook",
      canPlay: _patterns.canPlay.facebook,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerFacebook' */
          "./Facebook-Y7AATTZS.js"
        );
      })
    }, {
      key: "streamable",
      name: "Streamable",
      canPlay: _patterns.canPlay.streamable,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerStreamable' */
          "./Streamable-UOESWEQJ.js"
        );
      })
    }, {
      key: "wistia",
      name: "Wistia",
      canPlay: _patterns.canPlay.wistia,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerWistia' */
          "./Wistia-2CGPXIX6.js"
        );
      })
    }, {
      key: "twitch",
      name: "Twitch",
      canPlay: _patterns.canPlay.twitch,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerTwitch' */
          "./Twitch-Q77STIWU.js"
        );
      })
    }, {
      key: "dailymotion",
      name: "DailyMotion",
      canPlay: _patterns.canPlay.dailymotion,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerDailyMotion' */
          "./DailyMotion-WOJ4ZCNL.js"
        );
      })
    }, {
      key: "mixcloud",
      name: "Mixcloud",
      canPlay: _patterns.canPlay.mixcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerMixcloud' */
          "./Mixcloud-JWBCPDMF.js"
        );
      })
    }, {
      key: "vidyard",
      name: "Vidyard",
      canPlay: _patterns.canPlay.vidyard,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerVidyard' */
          "./Vidyard-HWGBGAK7.js"
        );
      })
    }, {
      key: "kaltura",
      name: "Kaltura",
      canPlay: _patterns.canPlay.kaltura,
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerKaltura' */
          "./Kaltura-B45PAQER.js"
        );
      })
    }, {
      key: "file",
      name: "FilePlayer",
      canPlay: _patterns.canPlay.file,
      canEnablePIP: function canEnablePIP(url) {
        return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
      },
      lazyPlayer: (0, _react.lazy)(function() {
        return import(
          /* webpackChunkName: 'reactPlayerFilePlayer' */
          "./FilePlayer-I3O5KH5Z.js"
        );
      })
    }];
    exports["default"] = _default;
  }
});

// node_modules/react-player/lazy/props.js
var require_props = __commonJS({
  "node_modules/react-player/lazy/props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = exports.propTypes = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var string = _propTypes["default"].string;
    var bool = _propTypes["default"].bool;
    var number = _propTypes["default"].number;
    var array = _propTypes["default"].array;
    var oneOfType = _propTypes["default"].oneOfType;
    var shape = _propTypes["default"].shape;
    var object = _propTypes["default"].object;
    var func = _propTypes["default"].func;
    var node = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number,
      muted: bool,
      playbackRate: number,
      width: oneOfType([string, number]),
      height: oneOfType([string, number]),
      style: object,
      progressInterval: number,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string, object]),
      playIcon: node,
      previewTabIndex: number,
      fallback: node,
      oEmbedUrl: string,
      wrapper: oneOfType([string, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string,
          version: string,
          playerId: string,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceSafariHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string,
          dashVersion: string,
          flvVersion: string
        }),
        wistia: shape({
          options: object,
          playerId: string,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    exports.propTypes = propTypes;
    var noop = function noop2() {
    };
    var defaultProps = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: "640px",
      height: "360px",
      style: {},
      progressInterval: 1e3,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: "div",
      previewTabIndex: 0,
      oEmbedUrl: "https://noembed.com/embed?url={url}",
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop
        },
        facebook: {
          appId: "1309697205772819",
          version: "v3.3",
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            "endscreen-enable": false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: "1.1.4",
          dashVersion: "3.1.3",
          flvVersion: "1.5.0"
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop,
      onStart: noop,
      onPlay: noop,
      onPause: noop,
      onBuffer: noop,
      onBufferEnd: noop,
      onEnded: noop,
      onError: noop,
      onDuration: noop,
      onSeek: noop,
      onPlaybackRateChange: noop,
      onProgress: noop,
      onClickPreview: noop,
      onEnablePIP: noop,
      onDisablePIP: noop
    };
    exports.defaultProps = defaultProps;
  }
});

// node_modules/react-player/lazy/Player.js
var require_Player = __commonJS({
  "node_modules/react-player/lazy/Player.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SEEK_ON_PLAY_EXPIRY = 5e3;
    var Player = function(_Component) {
      _inherits(Player2, _Component);
      var _super = _createSuper(Player2);
      function Player2() {
        var _this;
        _classCallCheck(this, Player2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty(_assertThisInitialized(_this), "mounted", false);
        _defineProperty(_assertThisInitialized(_this), "isReady", false);
        _defineProperty(_assertThisInitialized(_this), "isPlaying", false);
        _defineProperty(_assertThisInitialized(_this), "isLoading", true);
        _defineProperty(_assertThisInitialized(_this), "loadOnReady", null);
        _defineProperty(_assertThisInitialized(_this), "startOnPlay", true);
        _defineProperty(_assertThisInitialized(_this), "seekOnPlay", null);
        _defineProperty(_assertThisInitialized(_this), "onDurationCalled", false);
        _defineProperty(_assertThisInitialized(_this), "handlePlayerMount", function(player) {
          if (_this.player) {
            _this.progress();
            return;
          }
          _this.player = player;
          _this.player.load(_this.props.url);
          _this.progress();
        });
        _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function(key) {
          if (!_this.player)
            return null;
          return _this.player[key];
        });
        _defineProperty(_assertThisInitialized(_this), "progress", function() {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;
            var loadedSeconds = _this.getSecondsLoaded();
            var duration = _this.getDuration();
            if (duration) {
              var progress = {
                playedSeconds,
                played: playedSeconds / duration
              };
              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration;
              }
              if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }
              _this.prevPlayed = progress.playedSeconds;
              _this.prevLoaded = progress.loadedSeconds;
            }
          }
          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        });
        _defineProperty(_assertThisInitialized(_this), "handleReady", function() {
          if (!_this.mounted)
            return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;
          onReady();
          if (!muted && volume !== null) {
            _this.player.setVolume(volume);
          }
          if (_this.loadOnReady) {
            _this.player.load(_this.loadOnReady, true);
            _this.loadOnReady = null;
          } else if (playing) {
            _this.player.play();
          }
          _this.handleDurationCheck();
        });
        _defineProperty(_assertThisInitialized(_this), "handlePlay", function() {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;
          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate && playbackRate !== 1) {
              _this.player.setPlaybackRate(playbackRate);
            }
            onStart();
            _this.startOnPlay = false;
          }
          onPlay();
          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);
            _this.seekOnPlay = null;
          }
          _this.handleDurationCheck();
        });
        _defineProperty(_assertThisInitialized(_this), "handlePause", function(e) {
          _this.isPlaying = false;
          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "handleEnded", function() {
          var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;
          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }
          if (!loop) {
            _this.isPlaying = false;
            onEnded();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "handleError", function() {
          var _this$props4;
          _this.isLoading = false;
          (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
        });
        _defineProperty(_assertThisInitialized(_this), "handleDurationCheck", function() {
          clearTimeout(_this.durationCheckTimeout);
          var duration = _this.getDuration();
          if (duration) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration);
              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "handleLoaded", function() {
          _this.isLoading = false;
        });
        return _this;
      }
      _createClass(Player2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          clearTimeout(this.durationCheckTimeout);
          if (this.isReady && this.props.stopOnUnmount) {
            this.player.stop();
            if (this.player.disablePIP) {
              this.player.disablePIP();
            }
          }
          this.mounted = false;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          if (!this.player) {
            return;
          }
          var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;
          if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {
              console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
              this.loadOnReady = url;
              return;
            }
            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(url, this.isReady);
          }
          if (!prevProps.playing && playing && !this.isPlaying) {
            this.player.play();
          }
          if (prevProps.playing && !playing && this.isPlaying) {
            this.player.pause();
          }
          if (!prevProps.pip && pip && this.player.enablePIP) {
            this.player.enablePIP();
          }
          if (prevProps.pip && !pip && this.player.disablePIP) {
            this.player.disablePIP();
          }
          if (prevProps.volume !== volume && volume !== null) {
            this.player.setVolume(volume);
          }
          if (prevProps.muted !== muted) {
            if (muted) {
              this.player.mute();
            } else {
              this.player.unmute();
              if (volume !== null) {
                setTimeout(function() {
                  return _this2.player.setVolume(volume);
                });
              }
            }
          }
          if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(playbackRate);
          }
          if (prevProps.loop !== loop && this.player.setLoop) {
            this.player.setLoop(loop);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady)
            return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady)
            return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady)
            return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount, type) {
          var _this3 = this;
          if (!this.isReady) {
            if (amount !== 0) {
              this.seekOnPlay = amount;
              setTimeout(function() {
                _this3.seekOnPlay = null;
              }, SEEK_ON_PLAY_EXPIRY);
            }
            return;
          }
          var isFraction = !type ? amount > 0 && amount < 1 : type === "fraction";
          if (isFraction) {
            var duration = this.player.getDuration();
            if (!duration) {
              console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
              return;
            }
            this.player.seekTo(duration * amount);
            return;
          }
          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player3 = this.props.activePlayer;
          if (!Player3) {
            return null;
          }
          return _react["default"].createElement(Player3, _extends({}, this.props, {
            onMount: this.handlePlayerMount,
            onReady: this.handleReady,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onEnded: this.handleEnded,
            onLoaded: this.handleLoaded,
            onError: this.handleError
          }));
        }
      }]);
      return Player2;
    }(_react.Component);
    exports["default"] = Player;
    _defineProperty(Player, "displayName", "Player");
    _defineProperty(Player, "propTypes", _props.propTypes);
    _defineProperty(Player, "defaultProps", _props.defaultProps);
  }
});

// node_modules/react-player/lazy/ReactPlayer.js
var require_ReactPlayer = __commonJS({
  "node_modules/react-player/lazy/ReactPlayer.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createReactPlayer = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _memoizeOne = _interopRequireDefault((init_memoize_one_esm(), __toCommonJS(memoize_one_esm_exports)));
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    var _Player3 = _interopRequireDefault(require_Player());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Preview = (0, _react.lazy)(function() {
      return import(
        /* webpackChunkName: 'reactPlayerPreview' */
        "./Preview-IQ5CTPJC.js"
      );
    });
    var IS_BROWSER = typeof window !== "undefined" && window.document;
    var IS_GLOBAL = typeof global !== "undefined" && global.window && global.window.document;
    var SUPPORTED_PROPS = Object.keys(_props.propTypes);
    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {
      return null;
    };
    var customPlayers = [];
    var createReactPlayer = function createReactPlayer2(players, fallback) {
      var _class, _temp;
      return _temp = _class = function(_Component) {
        _inherits(ReactPlayer, _Component);
        var _super = _createSuper(ReactPlayer);
        function ReactPlayer() {
          var _this;
          _classCallCheck(this, ReactPlayer);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized(_this), "state", {
            showPreview: !!_this.props.light
          });
          _defineProperty(_assertThisInitialized(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleClickPreview", function(e) {
            _this.setState({
              showPreview: false
            });
            _this.props.onClickPreview(e);
          });
          _defineProperty(_assertThisInitialized(_this), "showPreview", function() {
            _this.setState({
              showPreview: true
            });
          });
          _defineProperty(_assertThisInitialized(_this), "getDuration", function() {
            if (!_this.player)
              return null;
            return _this.player.getDuration();
          });
          _defineProperty(_assertThisInitialized(_this), "getCurrentTime", function() {
            if (!_this.player)
              return null;
            return _this.player.getCurrentTime();
          });
          _defineProperty(_assertThisInitialized(_this), "getSecondsLoaded", function() {
            if (!_this.player)
              return null;
            return _this.player.getSecondsLoaded();
          });
          _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function() {
            var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "player";
            if (!_this.player)
              return null;
            return _this.player.getInternalPlayer(key);
          });
          _defineProperty(_assertThisInitialized(_this), "seekTo", function(fraction, type) {
            if (!_this.player)
              return null;
            _this.player.seekTo(fraction, type);
          });
          _defineProperty(_assertThisInitialized(_this), "handleReady", function() {
            _this.props.onReady(_assertThisInitialized(_this));
          });
          _defineProperty(_assertThisInitialized(_this), "getActivePlayer", (0, _memoizeOne["default"])(function(url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];
              if (player.canPlay(url)) {
                return player;
              }
            }
            if (fallback) {
              return fallback;
            }
            return null;
          }));
          _defineProperty(_assertThisInitialized(_this), "getConfig", (0, _memoizeOne["default"])(function(url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));
          _defineProperty(_assertThisInitialized(_this), "getAttributes", (0, _memoizeOne["default"])(function(url) {
            return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
          }));
          _defineProperty(_assertThisInitialized(_this), "renderActivePlayer", function(url) {
            if (!url)
              return null;
            var player = _this.getActivePlayer(url);
            if (!player)
              return null;
            var config = _this.getConfig(url, player.key);
            return _react["default"].createElement(_Player3["default"], _extends({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });
          return _this;
        }
        _createClass(ReactPlayer, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;
            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }
            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url)
              return null;
            var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;
            return _react["default"].createElement(Preview, {
              url,
              light,
              playIcon,
              previewTabIndex,
              oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback2 = _this$props2.fallback, Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            var wrapperRef = typeof Wrapper === "string" ? this.references.wrapper : void 0;
            return _react["default"].createElement(Wrapper, _extends({
              ref: wrapperRef,
              style: _objectSpread(_objectSpread({}, style), {}, {
                width,
                height
              })
            }, attributes), _react["default"].createElement(UniversalSuspense, {
              fallback: fallback2
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);
        return ReactPlayer;
      }(_react.Component), _defineProperty(_class, "displayName", "ReactPlayer"), _defineProperty(_class, "propTypes", _props.propTypes), _defineProperty(_class, "defaultProps", _props.defaultProps), _defineProperty(_class, "addCustomPlayer", function(player) {
        customPlayers.push(player);
      }), _defineProperty(_class, "removeCustomPlayers", function() {
        customPlayers.length = 0;
      }), _defineProperty(_class, "canPlay", function(url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];
          if (_Player.canPlay(url)) {
            return true;
          }
        }
        return false;
      }), _defineProperty(_class, "canEnablePIP", function(url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];
          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }
        return false;
      }), _temp;
    };
    exports.createReactPlayer = createReactPlayer;
  }
});

// node_modules/react-player/lazy/index.js
var require_lazy = __commonJS({
  "node_modules/react-player/lazy/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _players = _interopRequireDefault(require_players());
    var _ReactPlayer = require_ReactPlayer();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var fallback = _players["default"][_players["default"].length - 1];
    var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);
    exports["default"] = _default;
  }
});
export default require_lazy();
//# sourceMappingURL=react-player_lazy.js.map
